{"version":3,"sources":["hooks.js","App.js","serviceWorker.js","index.js"],"names":["useFetch","url","initialData","options","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","_useState3","_useState4","data","setData","useEffect","_doFetch","asyncToGenerator","regenerator_default","a","mark","_callee","response","json","wrap","_context","prev","next","fetch","sent","ok","t0","stop","this","apply","doFetch","result","API_BASE_URL","App","quote","setQuote","gameID","setGameID","_useFetch","game_id","_useState5","text","isRight","message","_useState6","currentGuess","setCurrentGuess","react_default","createElement","className","type","onChange","event","objectSpread","target","value","onClick","trim","method","headers","Content-Type","body","JSON","stringify","guess","then","answer","catch","console","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f1135f6.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useFetch = (url, initialData, options = {}) => {\n  const [loading, setLoading] = useState(false)\n  const [data, setData] = useState(initialData)\n\n  useEffect(() => {\n    setLoading(true)\n\n    async function doFetch () {\n      try {\n        const response = await fetch(url, options)\n        if (response.ok) {\n          const json = await response.json()\n          setData(json)\n        } else {\n          setData(null)\n        }\n      } catch (error) {\n        setData(error)\n      }\n    }\n\n    doFetch()\n    setLoading(false)\n  }, [url])\n\n  return { loading, result: data }\n}\n\nconst useLocalStorage = (key, initialValue) => {\n  const [item, setInnerValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  const setValue = value => {\n    setInnerValue(value)\n    window.localStorage.setItem(key, JSON.stringify(item))\n  }\n\n  return [item, setValue]\n}\n\nexport { useFetch, useLocalStorage }\n","import React, { useState, useEffect } from 'react'\nimport { useFetch } from './hooks'\nimport './App.css'\n\nconst API_BASE_URL = 'https://chasemetzger-quotes-game.herokuapp.com'\n\nfunction App () {\n  const [quote, setQuote] = useState('BLAH')\n  const [gameID, setGameID] = useState('')\n  const { loading, result } = useFetch(API_BASE_URL + '/start-game', { game_id: null, quote })\n  const [currentGuess, setCurrentGuess] = useState({\n    text: '',\n    isRight: false,\n    message: ''\n  })\n\n  useEffect(() => {\n    if (!loading) {\n      setQuote(result.quote)\n      setGameID(result.game_id)\n    }\n  }, [result])\n\n  function onGuessChange (event) {\n    setCurrentGuess({\n      ...currentGuess,\n      text: event.target.value\n    })\n  }\n\n  function onSubmitGuess () {\n    if (currentGuess.text.trim() !== '') {\n      fetch(API_BASE_URL + '/check-guess', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          game_id: gameID,\n          guess: currentGuess.text\n        })\n      })\n        .then(response => response.json())\n        .then(answer => setCurrentGuess({\n          ...currentGuess,\n          message: answer.message,\n          isRight: answer.quote !== undefined\n        }))\n        .catch(console.log)\n    }\n  }\n\n  function restartGame () {\n    fetch(API_BASE_URL + '/start-game', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        game_id: gameID\n      })\n    })\n      .then(response => response.json())\n      .then(data => {\n        setCurrentGuess({\n          text: '',\n          isRight: false,\n          message: ''\n        })\n\n        setQuote(data.quote)\n      })\n      .catch(console.log)\n  }\n\n  return (\n    <div className=\"app\">\n      <h2>{quote}</h2>\n      <p>Enter your guess</p>\n      <input type=\"text\" onChange={onGuessChange} value={currentGuess.text}/>\n      <button onClick={onSubmitGuess}>Guess</button>\n      <h1>{currentGuess.message}</h1>\n      {currentGuess.isRight && <button onClick={restartGame}>Play again?</button>}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}