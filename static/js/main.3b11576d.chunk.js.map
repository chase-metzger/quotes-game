{"version":3,"sources":["hooks.js","context.js","GameCard.js","CorrectAnswer.js","App.js","serviceWorker.js","index.js"],"names":["useFetch","url","initialData","options","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","_useState3","_useState4","data","setData","useEffect","_doFetch","asyncToGenerator","regenerator_default","a","mark","_callee","response","json","wrap","_context","prev","next","fetch","sent","ok","t0","stop","this","apply","doFetch","result","useSessionStorage","key","initialValue","_useState7","item","window","sessionStorage","getItem","JSON","parse","error","_useState8","setInnerValue","value","console","log","setItem","stringify","GameContext","React","createContext","currentGuess","text","isRight","messageFromServer","quote","remainingGuesses","GameCard","_ref","onGuess","_useContext","objectWithoutProperties","useContext","correctAnswer","setCurrentGuessText","restartGame","guessInputRef","useRef","onEnterPress","event","preventDefault","keyCode","trim","current","focus","addEventListener","removeEventListener","react_default","createElement","Card_default","className","style","width","Header","Body","Title","Text","InputGroup_default","size","Form_default","placeholder","ref","as","aria-label","onChange","target","Append","btnVariant","onClick","btnText","Button_default","variant","renderButton","Alert_default","CorrectAnswer","marginTop","Jumbotron_default","author","href","rel","SERVER_BASE_URL","GameCardAnimator","posed","div","enter","y","transition","duration","stiffness","type","ease","exit","App","setQuote","_useSessionStorage","_useSessionStorage2","gameID","setGameID","setRemainingGuesses","_useState5","_useState6","setCorrectAnswer","_useFetch","game_id","setCurrentGuess","updateStateFromGuessAnswer","answer","objectSpread","message","is_right","remaining_guesses","correct_answer","id","context","Provider","method","headers","Content-Type","body","then","catch","react_pose_es","animateOnMount","guess","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b11576d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useFetch = (url, initialData, options = {}) => {\n  const [loading, setLoading] = useState(false)\n  const [data, setData] = useState(initialData)\n\n  useEffect(() => {\n    setLoading(true)\n\n    async function doFetch () {\n      try {\n        const response = await fetch(url, options)\n        if (response.ok) {\n          const json = await response.json()\n          setData(json)\n        } else {\n          setData(null)\n        }\n      } catch (error) {\n        setData(error)\n      }\n    }\n\n    doFetch()\n    setLoading(false)\n  }, [url])\n\n  return { loading, result: data }\n}\n\nconst useLocalStorage = (key, initialValue) => {\n  const [item, setInnerValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  const setValue = value => {\n    setInnerValue(value)\n    window.localStorage.setItem(key, JSON.stringify(value))\n  }\n\n  return [item, setValue]\n}\n\nconst useSessionStorage = (key, initialValue) => {\n  const [item, setInnerValue] = useState(() => {\n    try {\n      const item = window.sessionStorage.getItem(key)\n      return (item !== null && item !== undefined ? JSON.parse(item) : initialValue)\n    } catch (error) {\n      return error\n    }\n  })\n\n  const setValue = value => {\n    setInnerValue(value)\n    console.log(value)\n    window.sessionStorage.setItem(key, JSON.stringify(value))\n  }\n\n  return [item, setValue]\n}\n\nexport { useFetch, useLocalStorage, useSessionStorage }\n","import React from 'react'\n\nconst GameContext = React.createContext({\n  currentGuess: {\n    text: '',\n    isRight: false,\n    messageFromServer: ''\n  },\n  quote: '',\n  remainingGuesses: 0\n})\n\nexport default GameContext\n","import React, { useEffect, useRef, useContext } from 'react'\n\nimport Card from 'react-bootstrap/Card'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Button from 'react-bootstrap/Button'\nimport FormControl from 'react-bootstrap/Form'\nimport Alert from 'react-bootstrap/Alert'\n\nimport GameContext from './context'\n\nexport default function GameCard ({ onGuess, ...rest }) {\n  const { quote, currentGuess, correctAnswer, remainingGuesses, setCurrentGuessText, restartGame } = useContext(GameContext)\n  let guessInputRef = useRef(null)\n\n  useEffect(() => {\n    const onEnterPress = (event) => {\n      event.preventDefault()\n      if (event.keyCode === 13 && currentGuess.text.trim() !== '') {\n        onGuess(currentGuess.text)\n        guessInputRef.current.focus()\n      }\n    }\n\n    guessInputRef.current.addEventListener('keyup', onEnterPress)\n\n    return () => guessInputRef.current.removeEventListener('keyup', onEnterPress)\n  })\n\n  function renderButton () {\n    let btnVariant = 'primary'\n    let onClick = () => onGuess(currentGuess.text)\n    let btnText = 'Guess'\n    if (currentGuess.isRight) {\n      btnVariant = 'success'\n      onClick = restartGame\n      btnText = 'Play again?'\n    } else if (correctAnswer) {\n      btnVariant = 'danger'\n      onClick = restartGame\n      btnText = 'Play again?'\n    }\n\n    return <Button variant={btnVariant} onClick={onClick}>{btnText}</Button>\n  }\n\n  return (\n    <Card className=\"mx-auto\" style={{ width: '24rem' }}>\n      <Card.Header>Famous Quote Guessing Game</Card.Header>\n      <Card.Body>\n        <Card.Title>Can you guess who said this?</Card.Title>\n        <Card.Text>\n          {quote}\n        </Card.Text>\n        <InputGroup size=\"sm\" className=\"mb-3 mx-auto\">\n          <FormControl placeholder=\"Enter guess...\" ref={guessInputRef} value={currentGuess.text} as=\"input\" aria-label=\"Guess input\" onChange={(event) => setCurrentGuessText(event.target.value)} />\n          <InputGroup.Append>\n            {renderButton()}\n          </InputGroup.Append>\n        </InputGroup>\n        {currentGuess.messageFromServer && <Alert variant={currentGuess.isRight ? 'success' : 'danger'}>{currentGuess.messageFromServer}</Alert>}\n        {(remainingGuesses > 0) && <Card.Text>Remaining guesses: {remainingGuesses}</Card.Text>}\n      </Card.Body>\n    </Card>\n  )\n}\n","import React from 'react'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Card from 'react-bootstrap/Card'\n\nexport default function CorrectAnswer ({ quote }) {\n  return (\n    <Card className=\"mx-auto\" style={{ width: '30rem', marginTop: '5rem' }}>\n      <Card.Body>\n        <Jumbotron>\n          <h1>The answer was {quote.author}</h1>\n          <p>Learn more about this person: <a href={quote['bio-link']} rel=\"noopener noreferrer\" target=\"_blank\">{quote['bio-link']}</a></p>\n        </Jumbotron>\n      </Card.Body>\n    </Card>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { useFetch, useSessionStorage } from './hooks'\n\nimport posed, { PoseGroup } from 'react-pose'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nimport GameContext from './context'\nimport GameCard from './GameCard'\nimport CorrectAnswer from './CorrectAnswer'\n// const SERVER_BASE_URL = 'http://localhost:5000'\nconst SERVER_BASE_URL = 'https://chasemetzger-quotes-game.herokuapp.com'\n\nconst GameCardAnimator = posed.div({\n enter: {\n    y: 0,\n    transition: {\n      duration: 250,\n      stiffness: 100,\n      type: 'spring',\n      y: {\n        ease: 'easeInOut'\n      }\n    }\n  },\n  exit: {\n    y: '100%',\n    transition: {\n      duration: 250,\n      ease: 'easeInOut'\n    }\n  }\n})\n\nfunction App () {\n  const [quote, setQuote] = useState('BLAH')\n  const [gameID, setGameID] = useSessionStorage('gameID', null)\n  const [remainingGuesses, setRemainingGuesses] = useState(0)\n  const [correctAnswer, setCorrectAnswer] = useState(null)\n  const { loading, result } = useFetch(SERVER_BASE_URL + '/start-game', { game_id: null, quote })\n\n  const [currentGuess, setCurrentGuess] = useState({\n    text: '',\n    isRight: false,\n    messageFromServer: ''\n  })\n\n  useEffect(() => {\n    if (!loading) {\n      setQuote(result.quote)\n      setGameID(result.game_id)\n      setRemainingGuesses(result.remaining_guesses)\n    }\n  }, [result])\n\n  function setCurrentGuessText (text) {\n    setCurrentGuess({\n      ...currentGuess,\n      text\n    })\n  }\n\n  function updateStateFromGuessAnswer (answer) {\n    setCurrentGuess({\n      ...currentGuess,\n      messageFromServer: answer.message,\n      isRight: answer.is_right,\n      text: ''\n    })\n    setRemainingGuesses(answer.remaining_guesses)\n    if (answer.correct_answer) {\n      setCorrectAnswer(answer.correct_answer)\n    }\n  }\n\n  function onSubmitGuess (guess) {\n    if (guess.trim() !== '') {\n      fetch(SERVER_BASE_URL + '/check-guess', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          game_id: gameID,\n          guess\n        })\n      })\n        .then(response => response.json())\n        .then(updateStateFromGuessAnswer)\n        .catch(console.log)\n    }\n  }\n\n  function restartGame () {\n    fetch(SERVER_BASE_URL + '/start-game', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        game_id: gameID\n      })\n    })\n      .then(response => response.json())\n      .then(data => {\n        setCurrentGuess({\n          text: '',\n          isRight: false,\n          messageFromServer: ''\n        })\n\n        setQuote(data.quote)\n        setRemainingGuesses(data.remaining_guesses)\n        setCorrectAnswer(null)\n      })\n      .catch(console.log)\n  }\n\n  return (\n    <div id=\"app\">\n      <GameContext.Provider value={{ currentGuess, correctAnswer, quote, remainingGuesses, setCurrentGuessText, restartGame }}>\n        <PoseGroup animateOnMount={true}>\n          <GameCardAnimator key=\"game animator\">\n            <GameCard onGuess={onSubmitGuess}/>\n          </GameCardAnimator>\n        </PoseGroup>\n        {correctAnswer && <CorrectAnswer quote={correctAnswer} />}\n      </GameContext.Provider>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}